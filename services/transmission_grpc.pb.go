// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: services/transmission.proto

package anomaly_detector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransmissionServiceClient is the client API for TransmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmissionServiceClient interface {
	FetchTransmission(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransmissionService_FetchTransmissionClient, error)
}

type transmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmissionServiceClient(cc grpc.ClientConnInterface) TransmissionServiceClient {
	return &transmissionServiceClient{cc}
}

func (c *transmissionServiceClient) FetchTransmission(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransmissionService_FetchTransmissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransmissionService_ServiceDesc.Streams[0], "/protobuf.TransmissionService/FetchTransmission", opts...)
	if err != nil {
		return nil, err
	}
	x := &transmissionServiceFetchTransmissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransmissionService_FetchTransmissionClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type transmissionServiceFetchTransmissionClient struct {
	grpc.ClientStream
}

func (x *transmissionServiceFetchTransmissionClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmissionServiceServer is the server API for TransmissionService service.
// All implementations must embed UnimplementedTransmissionServiceServer
// for forward compatibility
type TransmissionServiceServer interface {
	FetchTransmission(*Request, TransmissionService_FetchTransmissionServer) error
	mustEmbedUnimplementedTransmissionServiceServer()
}

// UnimplementedTransmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransmissionServiceServer struct {
}

func (UnimplementedTransmissionServiceServer) FetchTransmission(*Request, TransmissionService_FetchTransmissionServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchTransmission not implemented")
}
func (UnimplementedTransmissionServiceServer) mustEmbedUnimplementedTransmissionServiceServer() {}

// UnsafeTransmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmissionServiceServer will
// result in compilation errors.
type UnsafeTransmissionServiceServer interface {
	mustEmbedUnimplementedTransmissionServiceServer()
}

func RegisterTransmissionServiceServer(s grpc.ServiceRegistrar, srv TransmissionServiceServer) {
	s.RegisterService(&TransmissionService_ServiceDesc, srv)
}

func _TransmissionService_FetchTransmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmissionServiceServer).FetchTransmission(m, &transmissionServiceFetchTransmissionServer{stream})
}

type TransmissionService_FetchTransmissionServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type transmissionServiceFetchTransmissionServer struct {
	grpc.ServerStream
}

func (x *transmissionServiceFetchTransmissionServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// TransmissionService_ServiceDesc is the grpc.ServiceDesc for TransmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.TransmissionService",
	HandlerType: (*TransmissionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchTransmission",
			Handler:       _TransmissionService_FetchTransmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/transmission.proto",
}
